{"ast":null,"code":"import _objectSpread from \"D:\\\\ReactJs-Training\\\\beach-reasort-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"D:\\\\ReactJs-Training\\\\beach-reasort-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\ReactJs-Training\\\\beach-reasort-react\\\\src\\\\contextStore\\\\RoomsContextProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport items from '../data';\nimport cloneDeep from 'lodash/cloneDeep';\nimport Client from '../contentFul/contentFul';\nconst RoomsContext = React.createContext();\n\nconst RoomsContextProvider = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        rooms = _useState2[0],\n        setRooms = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        sortedRooms = _useState4[0],\n        setSortedRooms = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        featuredRooms = _useState6[0],\n        setFeaturedRooms = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        loading = _useState8[0],\n        setLoading = _useState8[1];\n\n  const _useState9 = useState('all'),\n        _useState10 = _slicedToArray(_useState9, 2),\n        type = _useState10[0],\n        setType = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        availableTypes = _useState12[0],\n        setAvailableTypes = _useState12[1];\n\n  const _useState13 = useState(1),\n        _useState14 = _slicedToArray(_useState13, 2),\n        capacity = _useState14[0],\n        setCapacity = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        availableCapacity = _useState16[0],\n        setAvailableCapacity = _useState16[1];\n\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        price = _useState18[0],\n        setPrice = _useState18[1];\n\n  const _useState19 = useState(0),\n        _useState20 = _slicedToArray(_useState19, 2),\n        minPrice = _useState20[0],\n        setMinPrice = _useState20[1];\n\n  const _useState21 = useState(0),\n        _useState22 = _slicedToArray(_useState21, 2),\n        maxPrice = _useState22[0],\n        setMaxPrice = _useState22[1];\n\n  const _useState23 = useState(0),\n        _useState24 = _slicedToArray(_useState23, 2),\n        minSize = _useState24[0],\n        setMinSize = _useState24[1];\n\n  const _useState25 = useState(0),\n        _useState26 = _slicedToArray(_useState25, 2),\n        maxSize = _useState26[0],\n        setMaxSize = _useState26[1];\n\n  const _useState27 = useState(false),\n        _useState28 = _slicedToArray(_useState27, 2),\n        breakfast = _useState28[0],\n        setBreakfast = _useState28[1];\n\n  const _useState29 = useState(false),\n        _useState30 = _slicedToArray(_useState29, 2),\n        pets = _useState30[0],\n        setPets = _useState30[1];\n\n  const myState = {\n    rooms,\n    sortedRooms,\n    featuredRooms,\n    loading,\n    type,\n    availableTypes,\n    capacity,\n    availableCapacity,\n    price,\n    minPrice,\n    maxPrice,\n    minSize,\n    maxSize,\n    breakfast,\n    pets\n  };\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    Client.getEntries({\n      content_type: 'beachReasorRooms',\n      //To specify from which Content we want to get the records\n      order: 'sys.createdAt' // order items in the response\n\n    }).then(response => {\n      console.log(response.items);\n      let myRooms = formatData(response.items);\n      setRooms(myRooms);\n      setSortedRooms(myRooms);\n      let myFeaturedRooms = myRooms.filter(room => room.featured === true);\n      setFeaturedRooms(myFeaturedRooms);\n      getRoomsInfo(myRooms);\n      setLoading(false);\n    }).catch(console.error);\n  };\n\n  const formatData = items => {\n    let clonedItems = cloneDeep(items);\n    let tempItems = clonedItems.map(item => {\n      const id = item.sys.id;\n      const images = item.fields.images.map(img => img.fields.file.url);\n\n      const rooms = _objectSpread({}, item.fields, {\n        id,\n        images\n      });\n\n      return rooms;\n    });\n    console.log('inside format', tempItems);\n    return tempItems;\n  };\n\n  const getRoomsInfo = myRooms => {\n    let tempTypes = [\"all\"];\n    /*let isUnique=false;\r\n      myRooms.forEach((room, i)=>{\r\n          if(tempTypes.length===0){\r\n              tempTypes=[...tempTypes, room.type];\r\n          }\r\n          else {\r\n              tempTypes.forEach(type=>{\r\n                  if(type!==room.type){\r\n                      isUnique=true;\r\n                  }else{\r\n                      isUnique=false;\r\n                  }\r\n              });\r\n              if(isUnique){\r\n                  tempTypes=[...tempTypes,room.type];\r\n              }\r\n          }\r\n      });*/\n    //MODERN WAY://new Set([iterable]);//a Set returns A new Set object.\n    //Get rooms unique types\n\n    tempTypes = [...tempTypes, ...new Set(myRooms.map(room => room.type))];\n    setAvailableTypes(tempTypes); //Get rooms unique capacities\n\n    const tempCapacity = [...new Set(myRooms.map(room => room.capacity))];\n    setAvailableCapacity(tempCapacity); //Get the maximum and minumum price of the rooms\n\n    let maxPrice = Math.max(...myRooms.map(room => room.price)); //will return all the prices of the rooms and Math.max() will return the max price.\n\n    setMaxPrice(maxPrice);\n    setPrice(maxPrice);\n    let minPrice = Math.min(...myRooms.map(room => room.price));\n    setMinPrice(minPrice); //Get maximum size of the rooms\n\n    let maxSize = Math.max(...myRooms.map(room => room.size));\n    setMaxSize(maxSize);\n  };\n\n  const getRoomBySlug = slug => {\n    return rooms.find(room => room.slug === slug);\n  };\n\n  const handleChange = event => {\n    const type = event.target.type;\n    const name = event.target.name;\n    const value = type === 'checkbox' ? event.target.checked : event.target.value; //Because checkbox dont use value attribute it uses \"checked\"\n\n    if (name === 'type') {\n      setType(value);\n    }\n\n    if (name === 'capacity') {\n      setCapacity(value);\n    }\n\n    if (name === 'price') {\n      setPrice(value);\n    }\n\n    if (name === 'minSize') {\n      setMinSize(value);\n    }\n\n    if (name === 'maxSize') {\n      setMaxSize(value);\n    }\n\n    if (name === 'breakfast') {\n      let tempValue = !breakfast; //To toggle tik of checkbox\n\n      setBreakfast(tempValue);\n    }\n\n    if (name === 'pets') {\n      let tempValue = !pets;\n      setPets(tempValue);\n    }\n\n    console.log(event.type);\n    console.log('Event type=' + type, 'name=' + name, 'value=' + value);\n  }; //Necessary because we want to filter the Rooms after each time certain parameters like type or capacity changes because they will be updated asynchronously.\n\n\n  useEffect(() => {\n    filterRooms();\n  }, [type, price, capacity, minSize, maxSize, breakfast, pets]);\n\n  const filterRooms = () => {\n    let tempRooms = [...rooms];\n\n    if (type !== 'all') {\n      tempRooms = tempRooms.filter(room => room.type == type);\n    }\n\n    if (capacity != 1) {\n      tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n    }\n\n    tempRooms = tempRooms.filter(room => room.price <= price);\n    tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize);\n\n    if (breakfast) {\n      tempRooms = tempRooms.filter(room => room.breakfast === true);\n    }\n\n    if (pets) {\n      tempRooms = tempRooms.filter(room => room.pets === true);\n    }\n\n    setSortedRooms(tempRooms);\n  };\n\n  return React.createElement(RoomsContext.Provider, {\n    value: _objectSpread({}, myState, {\n      getRoomBySlug: getRoomBySlug,\n      handleChange: handleChange\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, props.children);\n};\n\nexport { RoomsContextProvider, RoomsContext };","map":{"version":3,"sources":["D:\\ReactJs-Training\\beach-reasort-react\\src\\contextStore\\RoomsContextProvider.js"],"names":["React","useEffect","useState","items","cloneDeep","Client","RoomsContext","createContext","RoomsContextProvider","props","rooms","setRooms","sortedRooms","setSortedRooms","featuredRooms","setFeaturedRooms","loading","setLoading","type","setType","availableTypes","setAvailableTypes","capacity","setCapacity","availableCapacity","setAvailableCapacity","price","setPrice","minPrice","setMinPrice","maxPrice","setMaxPrice","minSize","setMinSize","maxSize","setMaxSize","breakfast","setBreakfast","pets","setPets","myState","loadData","getEntries","content_type","order","then","response","console","log","myRooms","formatData","myFeaturedRooms","filter","room","featured","getRoomsInfo","catch","error","clonedItems","tempItems","map","item","id","sys","images","fields","img","file","url","tempTypes","Set","tempCapacity","Math","max","min","size","getRoomBySlug","slug","find","handleChange","event","target","name","value","checked","tempValue","filterRooms","tempRooms","children"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\r\nimport items from '../data'\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport Client from '../contentFul/contentFul'\r\n\r\n\r\nconst RoomsContext=React.createContext();\r\n\r\nconst RoomsContextProvider=(props)=>{\r\n\r\n    const [rooms, setRooms]=useState([]);\r\n    const [sortedRooms, setSortedRooms]=useState([]);\r\n    const [featuredRooms, setFeaturedRooms]=useState([]);\r\n    const [loading, setLoading]=useState(true);\r\n    const [type, setType]=useState('all');\r\n    const [availableTypes, setAvailableTypes]=useState([]);\r\n    const [capacity, setCapacity]=useState(1);\r\n    const [availableCapacity, setAvailableCapacity]=useState([]);\r\n    const [price, setPrice]=useState(0);\r\n    const [minPrice, setMinPrice]=useState(0);\r\n    const [maxPrice, setMaxPrice]=useState(0);\r\n    const [minSize, setMinSize]=useState(0);\r\n    const [maxSize, setMaxSize]=useState(0);\r\n    const [breakfast, setBreakfast]=useState(false);\r\n    const [pets, setPets]=useState(false);\r\n\r\n    const myState={\r\n        rooms,\r\n        sortedRooms,\r\n        featuredRooms,\r\n        loading,\r\n        type,\r\n        availableTypes,\r\n        capacity,\r\n        availableCapacity,\r\n        price,\r\n        minPrice,\r\n        maxPrice,\r\n        minSize,\r\n        maxSize,\r\n        breakfast,\r\n        pets\r\n    };\r\n\r\n    useEffect(()=>{\r\n        loadData();\r\n    },[]);\r\n\r\n    const loadData=()=>{\r\n        Client.getEntries({\r\n            content_type: 'beachReasorRooms', //To specify from which Content we want to get the records\r\n            order: 'sys.createdAt'// order items in the response\r\n        }).then((response) =>{\r\n            console.log(response.items)\r\n            let myRooms=formatData(response.items);\r\n            setRooms(myRooms);\r\n            setSortedRooms(myRooms);\r\n            let myFeaturedRooms=myRooms.filter(room=>room.featured===true);\r\n            setFeaturedRooms(myFeaturedRooms);\r\n            getRoomsInfo(myRooms);\r\n            setLoading(false);\r\n        })\r\n        .catch(console.error)\r\n\r\n    };\r\n\r\n    const formatData=(items)=>{\r\n        let clonedItems=cloneDeep(items);\r\n\r\n        let tempItems=clonedItems.map(item=>{\r\n            const id=item.sys.id;\r\n            const images=item.fields.images.map(img=>img.fields.file.url);\r\n            const rooms={...item.fields, id, images};\r\n            return rooms;\r\n        });\r\n        console.log('inside format', tempItems)\r\n        return tempItems;\r\n    };\r\n\r\n\r\n    const getRoomsInfo=(myRooms)=>{\r\n        let tempTypes=[\"all\"];\r\n      /*let isUnique=false;\r\n        myRooms.forEach((room, i)=>{\r\n            if(tempTypes.length===0){\r\n                tempTypes=[...tempTypes, room.type];\r\n            }\r\n            else {\r\n                tempTypes.forEach(type=>{\r\n                    if(type!==room.type){\r\n                        isUnique=true;\r\n                    }else{\r\n                        isUnique=false;\r\n                    }\r\n                });\r\n                if(isUnique){\r\n                    tempTypes=[...tempTypes,room.type];\r\n                }\r\n            }\r\n        });*/\r\n\r\n        //MODERN WAY://new Set([iterable]);//a Set returns A new Set object.\r\n        //Get rooms unique types\r\n        tempTypes=[...tempTypes,...new Set(myRooms.map(room=>room.type))];\r\n        setAvailableTypes(tempTypes);\r\n\r\n        //Get rooms unique capacities\r\n        const tempCapacity=[...new Set(myRooms.map(room=>room.capacity))];\r\n        setAvailableCapacity(tempCapacity);\r\n\r\n        //Get the maximum and minumum price of the rooms\r\n        let maxPrice=Math.max(...myRooms.map(room=>room.price));//will return all the prices of the rooms and Math.max() will return the max price.\r\n        setMaxPrice(maxPrice);\r\n        setPrice(maxPrice);\r\n        let minPrice=Math.min(...myRooms.map(room=>room.price));\r\n        setMinPrice(minPrice);\r\n\r\n        //Get maximum size of the rooms\r\n        let maxSize=Math.max(...myRooms.map(room=>room.size));\r\n        setMaxSize(maxSize);\r\n    };\r\n\r\n    const getRoomBySlug=(slug)=>{\r\n        return rooms.find(room=>room.slug===slug);\r\n    };\r\n\r\n    const handleChange=(event)=>{\r\n        const type=event.target.type;\r\n        const name=event.target.name;\r\n        const value=type==='checkbox'? event.target.checked:event.target.value;//Because checkbox dont use value attribute it uses \"checked\"\r\n\r\n        if(name==='type'){\r\n            setType(value);\r\n        }\r\n        if(name==='capacity'){\r\n            setCapacity(value);\r\n        }\r\n        if(name==='price'){\r\n            setPrice(value);\r\n        }\r\n        if(name==='minSize'){\r\n            setMinSize(value);\r\n        }\r\n        if(name==='maxSize'){\r\n            setMaxSize(value);\r\n        }\r\n        if(name==='breakfast'){\r\n            let tempValue=!breakfast;//To toggle tik of checkbox\r\n            setBreakfast(tempValue);\r\n        }\r\n        if(name==='pets'){\r\n            let tempValue=!pets;\r\n            setPets(tempValue);\r\n        }\r\n        console.log(event.type);\r\n        console.log('Event type='+type,'name='+name,'value='+value);\r\n    };\r\n    //Necessary because we want to filter the Rooms after each time certain parameters like type or capacity changes because they will be updated asynchronously.\r\n    useEffect(()=>{\r\n        filterRooms();\r\n    },[type, price, capacity, minSize, maxSize, breakfast, pets]);\r\n\r\n    const filterRooms=()=>{\r\n        let tempRooms=[...rooms];\r\n        if(type!=='all'){\r\n            tempRooms=tempRooms.filter(room=>room.type==type);\r\n        }\r\n        if(capacity!=1){\r\n            tempRooms=tempRooms.filter(room=>room.capacity>=capacity);\r\n        }\r\n        tempRooms=tempRooms.filter(room=>room.price<=price);\r\n\r\n        tempRooms=tempRooms.filter(room=>room.size>=minSize && room.size<=maxSize);\r\n\r\n        if(breakfast){\r\n            tempRooms=tempRooms.filter(room=>room.breakfast===true);\r\n        }\r\n\r\n        if(pets){\r\n            tempRooms=tempRooms.filter(room=>room.pets===true);\r\n        }\r\n\r\n        setSortedRooms(tempRooms);\r\n    };\r\n\r\n    return (\r\n        <RoomsContext.Provider value={{...myState,\r\n            getRoomBySlug:getRoomBySlug,\r\n            handleChange:handleChange}}>\r\n            {props.children}\r\n        </RoomsContext.Provider>\r\n    );\r\n};\r\n\r\nexport {RoomsContextProvider, RoomsContext}\r\n\r\n"]},"metadata":{},"sourceType":"module"}